INCLUDE ~item_rev/lib/compatibility.tpa~
INCLUDE ~item_rev/lib/tooltip_macro.tpa~
INCLUDE ~item_rev/lib/usability_description.tpa~
INCLUDE ~item_rev/lib/strrefs.tpa~

// SR changes the names of some spells, so if it is installed, we want our item abilities to use those names instead
ACTION_IF comp_sr BEGIN
  LOAD_TRA ~item_rev/languages/english/spell_revisions.tra~
  LOAD_TRA ~item_rev/languages/%LANGUAGE%/spell_revisions.tra~
END


/*------------------Additional Content-----------------*/

ACTION_IF install_sensible_lore BEGIN
  COPY ~item_rev/components/main/lore.2da~ ~override~
END

ACTION_IF install_ioun_stone_animations BEGIN
  COPY ~item_rev/components/main/ioun_stones~ ~override~
END

ACTION_IF install_item_reallocation BEGIN
  INCLUDE ~item_rev/components/main/item_reallocation.tpa~
END

INCLUDE ~item_rev/components/main/shared_effects.tpa~ // new effects that multiple items use
INCLUDE ~item_rev/components/main/1pp.tpa~ // 1PP paperdolls and shield/helmet/flaming sword animations
INCLUDE ~item_rev/components/main/demon_patch.tpa~ // remove an unusual weapon immunity from underdark demon lord

COPY ~item_rev/components/main/bams~ ~override~ // item icons borrowed from 1PP and IWD


/*------------------Items-----------------*/

INCLUDE ~item_rev/components/main/item_content.tpa~ // generate files that contain code for installing specific item content


// determine platform before we get into our big loop
OUTER_SET is_bg2 = 0
OUTER_SET is_bgt = 0
OUTER_SET is_tutu = 0
OUTER_SET is_bgee = 0
OUTER_SET is_bg2ee = 0
OUTER_SET is_eet = 0

ACTION_IF (GAME_IS ~tob bg2ee~ AND NOT GAME_IS ~bgt~) BEGIN
  OUTER_SET is_bg2 = 1
END
ELSE ACTION_IF (GAME_IS ~bgt~) BEGIN
  OUTER_SET is_bgt = 1
END
ELSE ACTION_IF (GAME_IS ~tutu tutu_totsc~) BEGIN
  OUTER_SET is_tutu = 1
END
ELSE ACTION_IF (GAME_IS ~bgee~) BEGIN
  OUTER_SET is_bgee = 1
END
ELSE ACTION_IF (GAME_IS ~bg2ee~) BEGIN
  OUTER_SET is_bg2ee = 1
END
ELSE ACTION_IF (GAME_IS ~eet~) BEGIN
  OUTER_SET is_eet = 1
END


// install items by looping through our array
COPY - ~item_rev/components/main/items.2da~ ~item_rev/components/main~
  READ_2DA_ENTRIES_NOW ~r2en_items~ 17
  FOR (row = 0; row < r2en_items; row += 1) BEGIN
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 0  id
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 1  type
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 2  itm
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 3  bg2
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 4  bgt
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 5  tutu
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 6  bgee
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 7  bg2ee
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 8  eet
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 9  name
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 10 id_name
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 11 desc
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 12 id_desc
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 13 tooltip1
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 14 tooltip2
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 15 tooltip3
    READ_2DA_ENTRY_FORMER ~r2en_items~ row 16 restrictions
                                              
    // figure out if the item should be installed and what filename it should have
    // based on reading information from the column associated with the current platform
    TEXT_SPRINT output ~%itm%~
    SET install = 0
    PATCH_IF (is_bg2 && NOT (~%bg2%~ STRING_EQUAL ~0~)) BEGIN // if bg2 column is 1, use itm column
      SET install = 1
      PATCH_IF (NOT (~%bg2%~ STRING_EQUAL ~1~)) BEGIN
        TEXT_SPRINT output ~%bg2%~
      END
    END
    ELSE PATCH_IF (is_bgt && NOT (~%bgt%~ STRING_EQUAL ~0~)) BEGIN // if bgt column is 1, use itm column
      SET install = 1
      PATCH_IF (NOT (~%bgt%~ STRING_EQUAL ~1~)) BEGIN
        TEXT_SPRINT output ~%bgt%~
      END
    END
    ELSE PATCH_IF (is_tutu && NOT (~%tutu%~ STRING_EQUAL ~0~)) BEGIN // if tutu column is 1, use itm column but prepend an underscore (_)
      SET install = 1
      PATCH_IF (NOT (~%tutu%~ STRING_EQUAL ~1~)) BEGIN
        TEXT_SPRINT output ~%tutu%~
      END
      ELSE BEGIN
        TEXT_SPRINT output ~_%itm%~
      END
    END
    ELSE PATCH_IF (is_bgee && NOT (~%bgee%~ STRING_EQUAL ~0~)) BEGIN // if bgee column is 1, use itm column
      SET install = 1
      PATCH_IF (NOT (~%bgee%~ STRING_EQUAL ~1~)) BEGIN
        TEXT_SPRINT output ~%bgee%~
      END
    END
    ELSE PATCH_IF (is_bg2ee && NOT (~%bg2ee%~ STRING_EQUAL ~0~)) BEGIN // if bg2ee column is 1, use itm column
      SET install = 1
      PATCH_IF (NOT (~%bg2ee%~ STRING_EQUAL ~1~)) BEGIN
        TEXT_SPRINT output ~%bg2ee%~
      END
    END
    ELSE PATCH_IF (is_eet && NOT (~%eet%~ STRING_EQUAL ~0~)) BEGIN // if eet column is 1, use itm column
      SET install = 1
      PATCH_IF (NOT (~%eet%~ STRING_EQUAL ~1~)) BEGIN
        TEXT_SPRINT output ~%eet%~
      END
    END
    
    // if Cursed Items mod is installed and this item should not overwrite it, skip installing it
    PATCH_IF (comp_cursed && (~%restrictions%~ STRING_CONTAINS_REGEXP ~cursed~) == 0) BEGIN
      SET install = 0
    END
    
    // time to install
    PATCH_IF (install) BEGIN
      PATCH_LOG ~Installing %id%...~
      
      PATCH_SILENT
      LPF RESOLVE_REF STR_VAR ref = EVAL ~%name%~ RET rname = strref END
      LPF RESOLVE_REF STR_VAR ref = EVAL ~%id_name%~ RET rid_name = strref END
      LPF RESOLVE_REF STR_VAR ref = EVAL ~%desc%~ RET rdesc = strref END
      LPF RESOLVE_REF STR_VAR ref = EVAL ~%id_desc%~ RET rid_desc = strref END
      LPF RESOLVE_REF STR_VAR ref = EVAL ~%tooltip1%~ RET rtooltip1 = strref END
      LPF RESOLVE_REF STR_VAR ref = EVAL ~%tooltip2%~ RET rtooltip2 = strref END
      LPF RESOLVE_REF STR_VAR ref = EVAL ~%tooltip3%~ RET rtooltip3 = strref END
      PATCH_VERBOSE
      
      INNER_ACTION BEGIN
        // copy item and set name and description
        COPY ~item_rev/itm/%itm%.itm~ ~override/%output%.itm~
          PATCH_IF (IS_AN_INT ~%rname%~) BEGIN
            WRITE_LONG NAME1 rname
          END
          PATCH_IF (IS_AN_INT ~%rid_name%~) BEGIN
            WRITE_LONG NAME2 rid_name
          END
          PATCH_IF (IS_AN_INT ~%rdesc%~) BEGIN
            WRITE_LONG UNIDENTIFIED_DESC rdesc
          END
          PATCH_IF (IS_AN_INT ~%rid_desc%~) BEGIN
            WRITE_LONG IDENTIFIED_DESC rid_desc
          END
          LPF update_item_descriptions_to_bgee END
        
        // update item tooltips
        ACTION_IF (NOT (~%rtooltip1%~ STRING_EQUAL ~*~)) BEGIN
          LAF tooltips INT_VAR $tip(1) = rtooltip1 STR_VAR item = EVAL ~%output%~ END
        END
        ACTION_IF (NOT (~%rtooltip2%~ STRING_EQUAL ~*~)) BEGIN
          LAF tooltips INT_VAR $tip(2) = rtooltip2 STR_VAR item = EVAL ~%output%~ END
        END
        ACTION_IF (NOT (~%rtooltip3%~ STRING_EQUAL ~*~)) BEGIN
          LAF tooltips INT_VAR $tip(3) = rtooltip3 STR_VAR item = EVAL ~%output%~ END
        END
        
        // install additional content for the item
        ACTION_IF (FILE_EXISTS ~item_rev/components/main/item_content/%id%.tpa~) BEGIN
          OUTER_TEXT_SPRINT EVAL ~%id%~ ~%output%~ // assign the filename to a variable named the same as the item ID
          INCLUDE ~item_rev/components/main/item_content/%id%.tpa~
        END
      END
    END
  END

/*------------------Iron Crisis-----------------*/
// from mercurier
// Since Koveras's Ring of Protection +1 is now Ring of Oppotunity, 
// update item exclusion rule

COPY_EXISTING ~itemexcl.2da~ ~override~
	READ_2DA_ENTRIES_NOW num_rows 2
	FOR (i = 1; i < num_rows; i += 1) BEGIN
		READ_2DA_ENTRY_FORMER num_rows i 0 current_item
		REPLACE_TEXTUALLY CASE_INSENSITIVE ~[%LNL%%MNL%%WNL%][ %TAB%]*ring25[ %TAB%].*~ ~~
	END
BUT_ONLY

/*------------------Iron Crisis-----------------*/
INCLUDE ~item_rev/lib/iron_crisis.tpa~
