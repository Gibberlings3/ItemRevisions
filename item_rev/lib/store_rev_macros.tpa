
// buy_group       - action macro, loads arrays of item types required for the 'buy' function to work
// fixed_order     - action macro, loads arrays of items requires for the 'items_to_order' function to work
// spelldesc       - action macro, loads array of spells required for the 'temple' function to work
//                                 patches SPELDESC.2DA to use real spell descriptions
// buy             - patch function, sets item types the store will buy
// items_to_order  - patch function, rearranges items in stores
// temple          - patch function, sets spells the store (temple) will provide
// store           - patch function, sets flags and values in the store
// make_scrolls    - action function, creates new scrolls with divine spells

///////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_MACRO buy_group BEGIN

ACTION_DEFINE_ARRAY $buy(weap)  BEGIN 0x10 0x11 0x13 0x14 0x15 0x16 0x17 0x18 0x19 0x1a 0x1d 0x1e END
ACTION_DEFINE_ARRAY $buy(armor) BEGIN 0x2 0x7 0xc END
ACTION_DEFINE_ARRAY $buy(rang)  BEGIN 0x5 0xe 0xf 0x12 0x1b 0x1f END
ACTION_DEFINE_ARRAY $buy(magic) BEGIN 0xb 0x23 END
ACTION_DEFINE_ARRAY $buy(potn)  BEGIN 0x9 END
ACTION_DEFINE_ARRAY $buy(jewel) BEGIN 0x1 0xa 0x21 0x22 END
ACTION_DEFINE_ARRAY $buy(misc)  BEGIN 0x0 0x3 0x4 0x6 0x8 0xd 0x1c 0x20 0x24 0x25 END
ACTION_DEFINE_ARRAY $buy(blade) BEGIN 0x13 0x14 0x19 0x1e END
ACTION_DEFINE_ARRAY $buy(blunt) BEGIN 0x10 0x11 0x15 0x16 0x17 0x18 0x1a 0x1d END
ACTION_DEFINE_ARRAY $buy(dwarf) BEGIN 0x15 0x19 END
ACTION_DEFINE_ARRAY $buy(elf)   BEGIN 0x5 0xf 0x14 END

END

///////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_MACRO fixed_order BEGIN

ACTION_DEFINE_ARRAY fixed_0  BEGIN dagg01 dagg02 dagg03 dagg15 dagg24 dagg05 dagg16 END // dagger
ACTION_DEFINE_ARRAY fixed_1  BEGIN sw1h07 sw1h21 sw1h08 sw1h14 sw1h98 sw1h09 sw1h29 sw1h74 END // short sword
ACTION_DEFINE_ARRAY fixed_2  BEGIN sw1h04 sw1h05 sw1h41 sw1h73 END // long sword
ACTION_DEFINE_ARRAY fixed_3  BEGIN sw1h01 sw1h02 sw1h42 sw1h72 END // bastard sword
ACTION_DEFINE_ARRAY fixed_4  BEGIN sw2h01 sw2h01b sw2h05 sw2h02 sw2h11 sw2h20 END // 2handed sword
ACTION_DEFINE_ARRAY fixed_5  BEGIN ax1h01 ax1h02 ax1h03 ax1h11 ax1h17 ax1h04 ax1h05 ax1h06 END // axe
ACTION_DEFINE_ARRAY fixed_6  BEGIN hamm01 hamm02 hamm03 hamm08 hamm12 END // hammer
ACTION_DEFINE_ARRAY fixed_7  BEGIN blun01 blun31 END // club
ACTION_DEFINE_ARRAY fixed_8  BEGIN blun04 blun05 blun21 blun33 END // mace
ACTION_DEFINE_ARRAY fixed_9  BEGIN blun06 blun07 blun15 blun34 END // morning star
ACTION_DEFINE_ARRAY fixed_10 BEGIN blun02 blun08 blun03 blun13 blun32 END // flail
ACTION_DEFINE_ARRAY fixed_11 BEGIN staf01 staf03 staf04 staf02 staf18 staf24 END // staff
ACTION_DEFINE_ARRAY fixed_12 BEGIN halb01 halbrd01 halb02 halb07 halb12 END // halberd
ACTION_DEFINE_ARRAY fixed_13 BEGIN sper01 sper04 sper02 sper05 sper06 END // spear
ACTION_DEFINE_ARRAY fixed_14 BEGIN sw1h20 sw1h56 sw1h22 sw1h76 END // scimitar
ACTION_DEFINE_ARRAY fixed_15 BEGIN sw1h48 sw1h49 END // ninja-to
ACTION_DEFINE_ARRAY fixed_16 BEGIN sw1h46 sw1h47 END // wakizashi
ACTION_DEFINE_ARRAY fixed_17 BEGIN sw1h43 sw1h44 sw1h55 sw1h75 END // katana
ACTION_DEFINE_ARRAY fixed_18 BEGIN dart01 dart02 dart03 dart04 END // dart
ACTION_DEFINE_ARRAY fixed_19 BEGIN bow05 bow06 bow18 bow26 rr#bow02 rr#bow03 rr#bow04 rr#bow05 END // short bow
ACTION_DEFINE_ARRAY fixed_20 BEGIN bow03 bow04 bow17 bow25 bow01 bow02 bow16 bow24 END // long bow
ACTION_DEFINE_ARRAY fixed_21 BEGIN arow01 arow02 arow11 arow15 END // arrow
ACTION_DEFINE_ARRAY fixed_22 BEGIN xbow04 xbow05 xbow09 xbow18 xbow01 xbow02 xbow07 xbow17 END // crossbow
ACTION_DEFINE_ARRAY fixed_23 BEGIN bolt01 bolt02 bolt06 bolt09 END // bolt
ACTION_DEFINE_ARRAY fixed_24 BEGIN slng01 slng02 slng04 slng03 slng10 END // sling
ACTION_DEFINE_ARRAY fixed_25 BEGIN bull01 bull02 bull03 bull05 bull06 END // bullet
ACTION_DEFINE_ARRAY fixed_26 BEGIN leat01 leat02 leat11 leat12 leat04 leat05 leat07 leat15 leat10 END // leather armor
ACTION_DEFINE_ARRAY fixed_27 BEGIN chan01 chan02 chan08 chan07 chan21 chan04 chan05 chan12 chan13 END // chainmail armor
ACTION_DEFINE_ARRAY fixed_28 BEGIN plat01 plat07 plat02 plat10 plat04 plat05 plat14 plat19 plat23 plat06 plat09 END // plate armor
ACTION_DEFINE_ARRAY fixed_29 BEGIN shld08 shld09 shld10 shld17 rr#buc02 rr#buc03 rr#buc04 END // buckler in modded game
ACTION_DEFINE_ARRAY fixed_30 BEGIN shld08 shld09 shld10 shld17 shld01 shld11 shld12 shld02 shld28 END // small shield and vanilla buckler
ACTION_DEFINE_ARRAY fixed_31 BEGIN shld03 shld13 shld14 shld04 shld29 END // medium shield
ACTION_DEFINE_ARRAY fixed_32 BEGIN shld05 shld15 shld16 shld18 shld06 shld19 shld30 END // tower shield
ACTION_DEFINE_ARRAY fixed_33 BEGIN helm01 helm08 helm09 helm10 helm11 helm12 helm13 helm22 END // headgear
ACTION_DEFINE_ARRAY fixed_34 BEGIN brac01 brac02 brac03 brac13 brac14 brac15 END // bracer/gauntlets
ACTION_DEFINE_ARRAY fixed_35 BEGIN  END // boots
ACTION_DEFINE_ARRAY fixed_36 BEGIN  END // belt
ACTION_DEFINE_ARRAY fixed_37 BEGIN  END // cloak
ACTION_DEFINE_ARRAY fixed_38 BEGIN clck12 clck13 clck14 clck18 clck09 clck10 clck11 END // robe
ACTION_DEFINE_ARRAY fixed_39 BEGIN  END // amulet
ACTION_DEFINE_ARRAY fixed_40 BEGIN  END // ring
ACTION_DEFINE_ARRAY fixed_41 BEGIN  END // gem
ACTION_DEFINE_ARRAY fixed_42 BEGIN  END // wand
ACTION_DEFINE_ARRAY fixed_43 BEGIN  END // bag
ACTION_DEFINE_ARRAY fixed_44 BEGIN  END // misc
ACTION_DEFINE_ARRAY fixed_45 BEGIN potn08 potn52 potn55 potn20 potn17 END // potion
ACTION_DEFINE_ARRAY fixed_46 BEGIN scrl07 scrl03 scrl04 scrl05 scrl06 scrl08 scrl09 scrl15 END // scroll
// items listed in these arrays will always be positioned at the top of their group, in the order specified
// if you disagree with something then add, remove or switch places as you see fit

END

///////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_MACRO spelldesc BEGIN

  ACTION_DEFINE_ASSOCIATIVE_ARRAY temple BEGIN
    cure_light_wounds    => sppr103
 //   slow_poison          => sppr212
    call_lightning       => sppr302
    dispel_magic         => sppr303
    remove_curse         => sppr307
    cure_medium_wounds   => sppr315
    cure_disease         => sppr317
    cure_serious_wounds  => sppr401
    neutralize_poison    => sppr404
    lesser_restoration   => sppr417
    cure_critical_wounds => sppr502
    raise_dead           => sppr504
    mass_cure            => rr#pr514
    heal                 => sppr607
    resurrection         => sppr712
    greater_restoration  => sppr713
  END

  ACTION_IF comp_sr=1 BEGIN
    OUTER_SPRINT $temple("cure_medium_wounds") sppr215
    OUTER_SPRINT $temple("cure_serious_wounds") sppr315
    OUTER_SPRINT $temple("cure_critical_wounds") sppr401
  END

  COPY_EXISTING speldesc.2da override
    PHP_EACH temple AS ind => res BEGIN
      REPLACE_TEXTUALLY CASE_INSENSITIVE ~\(%res% +-?[0-9]+ *\)~ ~~ // deleting old description entries, since they're inaccurate
    END

  ACTION_PHP_EACH temple AS ind => res BEGIN
    OUTER_SET spelldesc_strref=~-1~
    ACTION_IF FILE_EXISTS_IN_GAME ~%res%.spl~ BEGIN
      COPY_EXISTING - ~%res%.spl~ override PATCH_IF SOURCE_SIZE>0x71 BEGIN
        READ_LONG 0x50 spelldesc_strref
      END
      APPEND speldesc.2da ~%res% %spelldesc_strref%~ // cheers, and without KEEP_CRLF flag it autodeletes extra newlines :)
    END
  END

END

///////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION buy BEGIN
  READ_LONG 0x2c offset
  READ_LONG 0x30 number
  i=0
  DELETE_BYTES offset number*4
  PHP_EACH buy AS ind => res BEGIN
    PATCH_IF VARIABLE_IS_SET EVAL ~%%ind%%~ BEGIN
      PHP_EACH $buy("%ind%") AS i2 => r2 BEGIN
        INSERT_BYTES offset 4
        WRITE_LONG offset r2
        i+=1
      END
    END
  END
  WRITE_LONG 0x30 i
  PATCH_FOR_EACH off IN 0x34 0x4c 0x70 BEGIN
    PATCH_IF LONG_AT off>=offset BEGIN
      WRITE_LONG off (LONG_AT off - (number - i)*4)
    END
  END
END

///////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION items_to_order BEGIN

PATCH_IF SOURCE_SIZE>0x9b BEGIN PATCH_SILENT
  FOR (i=0;i<47;i+=1) BEGIN SET $counter("%i%")=0 END
  delete=0
  CLEAR_ARRAY sales GET_OFFSET_ARRAY sales 0x34 4 0x38 4 0 0 0x1c
  PHP_EACH sales AS ind => res BEGIN
    READ_ASCII res item_entry (0x1c)
    READ_ASCII res item_name (8) NULL
    PATCH_IF FILE_EXISTS_IN_GAME ~%item_name%.itm~ BEGIN INNER_ACTION BEGIN
     COPY_EXISTING - ~%item_name%.itm~ override PATCH_IF SOURCE_SIZE>0x71 BEGIN // seems i can't check the size if i do INNER_PATCH_FILE
      READ_SHORT 0x1c type
      READ_ASCII 0x22 anim (2)
      READ_BYTE  0x31 prof
      order =                // here starts the identification process that determines whichever group an item belongs to
          type=0x10                                         ? 0  // dagger
        : type=0x13&&prof=0x5b                              ? 1  // short sword
        : type=0x14&&prof=0x5a                              ? 2  // long sword
        : type=0x14&&prof=0x59                              ? 3  // bastard sword
        : type=0x14&&prof=0x5d                              ? 4  // 2handed sword
        : type=0x19                                         ? 5  // axe
        : type=0x15                                         ? 6  // hammer
        : type=0x11&&prof=0x73                              ? 7  // club
        : type=0x11&&prof=0x65                              ? 8  // mace
        : type=0x16                                         ? 9  // morning star
        : type=0x17                                         ? 10 // flail
        : type=0x1a                                         ? 11 // staff
        : type=0x1e                                         ? 12 // halberd
        : type=0x1d                                         ? 13 // spear
        : type=0x14&&prof=0x5f&&(~%anim%~ STRING_EQUAL_CASE ~sc~)                 ? 14 // scimitar
        : type=0x14&&(prof=0x5b||prof=0x5f)&&(~%anim%~ STRING_EQUAL_CASE ~s1~)    ? 15 // ninja-to
        : type=0x13&&(prof=0x5e||prof=0x5f)                 ? 16 // wakizashi
        : type=0x14&&prof=0x5e                              ? 17 // katana
        : type=0x18                                         ? 18 // dart
        : type=0xf&&prof=0x69                               ? 19 // short bow
        : type=0xf&&prof=0x68                               ? 20 // long bow
        : type=0x5                                          ? 21 // arrow
        : type=0x1b                                         ? 22 // crossbow
        : type=0x1f                                         ? 23 // bolt
        : type=0x12                                         ? 24 // sling
        : type=0xe                                          ? 25 // bullet
        : type=0x2&&(~%anim%~ STRING_EQUAL_CASE ~2a~)       ? 26 // leather armor
        : type=0x2&&(~%anim%~ STRING_EQUAL_CASE ~3a~)       ? 27 // chainmail armor
        : type=0x2&&(~%anim%~ STRING_EQUAL_CASE ~4a~)       ? 28 // plate armor
        : type=0xc&&(~%anim%~ STRING_EQUAL_CASE ~d1~)       ? 29 // buckler in modded game
        : type=0xc&&(~%anim%~ STRING_EQUAL_CASE ~d2~)       ? 30 // small shield and vanilla buckler
        : type=0xc&&((~%anim%~ STRING_EQUAL_CASE ~d3~)||(~%anim%~ STRING_EQUAL_CASE ~c0~))     ? 31 // medium shield
        : type=0xc&&((~%anim%~ STRING_EQUAL_CASE ~d4~)||(~%anim%~ STRING_EQUAL_CASE ~c4~))     ? 32 // tower shield
        : type=0x7                                          ? 33 // headgear
        : type=0x6                                          ? 34 // bracer/gauntlets
        : type=0x4                                          ? 35 // boots
        : type=0x3                                          ? 36 // belt
        : type=0x20                                         ? 37 // cloak
        : type=0x2&&((~%anim%~ STRING_EQUAL_CASE ~2w~)||(~%anim%~ STRING_EQUAL_CASE ~3w~)||(~%anim%~ STRING_EQUAL_CASE ~4w~)) ? 38 // robe
        : type=0x1                                          ? 39 // amulet
        : type=0xa                                          ? 40 // ring
        : type=0x22                                         ? 41 // gem
        : type=0x23                                         ? 42 // wand
        : type=0x24                                         ? 43 // bag
        : type=0x9                                          ? 45 // potion - yes, 44 is reserved for the last check
        : type=0xb                                          ? 46 // scroll
        :                                                     44 // book, wooden stake, figurine or other crap

      SPRINT $name("%order%"$counter("%order%")) ~%item_name%~   // ITM filename
      SPRINT $entry("%order%"$counter("%order%")) ~%item_entry%~ // item entry's ASCII copypaste
      SET $sorted("%order%"$counter("%order%")) = 0              // whether the entry was already rearranged - not yet
      SET $counter("%order%")+=1
    END ELSE BEGIN delete+=1 END END END ELSE BEGIN delete+=1 END // SOURCE_SIZE INNER_PATCH_FILE FILE_EXISTS_IN_GAME
  END // PHP_EACH

  z=46
  // scrolls are damn bitchy things, thanks to Demi they need inner sorting :)
  // 0-8 are arcane
  // 9-15 are divine
  // 16 is what remains; green scrolls belong here, but the array of fixed positions will drag them to the top
  FOR (i=0;i<17;i+=1) BEGIN SET $scroll_counter("%i%")=0 END
  bad_scroll=0
  FOR (i=0;i<EVAL $counter("%z%");i+=1) BEGIN
    bastard=0 // yep, bastard, as i forgot to put it here and for a full hour couldn't figure out what was wrong
    SPRINT name $name("%z%""%i%")
    INNER_PATCH_FILE ~%name%.itm~ BEGIN // file is valid, else it wouldn't have been enlisted, no need to check twice
      CLEAR_ARRAY itm_head GET_OFFSET_ARRAY itm_head ITM_V10_HEADERS
      PHP_EACH itm_head AS ind => res BEGIN
        CLEAR_ARRAY effects GET_OFFSET_ARRAY2 effects res ITM_V10_HEAD_EFFECTS
        PHP_EACH effects AS ind2 => res2 BEGIN
          READ_SHORT res2 opcode
          PATCH_IF (opcode=146||opcode=148)&&bastard=0 BEGIN // if can cast spell
            READ_ASCII res2+0x14 resource (8) NULL
            PATCH_IF FILE_EXISTS_IN_GAME ~%resource%.spl~ BEGIN INNER_ACTION BEGIN
             COPY_EXISTING - ~%resource%.spl~ override PATCH_IF SOURCE_SIZE>0x72 BEGIN // same again, can't do INNER_PATCH_FILE
              READ_SHORT 0x1c type
              READ_LONG  0x34 level
              PATCH_IF type=1 BEGIN                // if arcane
                FOR (j=1;j<10;j+=1) BEGIN
                  PATCH_IF level=j BEGIN
                    x=j - 1
                    SPRINT $scroll_name("%x%"$scroll_counter("%x%")) $name("%z%""%i%")
                    SPRINT $scroll_entry("%x%"$scroll_counter("%x%")) $entry("%z%""%i%")
                    SET $scroll_counter("%x%")+=1
                    bastard=1
                  END
                END
              END
              PATCH_IF type=2 BEGIN                // if divine
                FOR (j=1;j<8;j+=1) BEGIN
                  PATCH_IF level=j BEGIN
                    x=j+8
                    SPRINT $scroll_name("%x%"$scroll_counter("%x%")) $name("%z%""%i%")
                    SPRINT $scroll_entry("%x%"$scroll_counter("%x%")) $entry("%z%""%i%")
                    SET $scroll_counter("%x%")+=1
                    bastard=1
                  END
                END
              END
              PATCH_IF !(type=1||type=2) BEGIN      // if neither = crap
                x=16
                SPRINT $scroll_name("%x%"$scroll_counter("%x%")) $name("%z%""%i%")
                SPRINT $scroll_entry("%x%"$scroll_counter("%x%")) $entry("%z%""%i%")
                SET $scroll_counter("%x%")+=1
                bastard=1
              END
            END ELSE BEGIN bad_scroll+=1 END END END ELSE BEGIN bad_scroll+=1 END // SOURCE_SIZE INNER_PATCH_FILE FILE_EXISTS_IN_GAME
          END // if can cast spell
          PATCH_IF (!(opcode=146||opcode=148))&&bastard=0 BEGIN // if can't cast spell = crap
            SPRINT $scroll_name("16"$scroll_counter("16")) EVAL $name("%z%""%i%")
            SPRINT $scroll_entry("16"$scroll_counter("16")) EVAL $entry("%z%""%i%")
            SET $scroll_counter("16")+=1
            bastard=1
          END
        END // PHP_EACH
      END // PHP_EACH
    END // INNER_PATCH_FILE
  END // FOR
  scroll_counter=0
  FOR (i=0;i<17;i+=1) BEGIN
    FOR (j=0;j<$scroll_counter("%i%");j+=1) BEGIN
      SPRINT $name("%z%""%scroll_counter%") $scroll_name("%i%""%j%")
      SPRINT $entry("%z%""%scroll_counter%") $scroll_entry("%i%""%j%")
      scroll_counter+=1
    END
  END
  SET $counter("%z%") -= bad_scroll
  delete+=bad_scroll
  // end of scrolls

  READ_LONG 0x34 offset
  READ_LONG 0x38 count
  DELETE_BYTES offset delete*0x1c   // if we ran across invalid items or scrolls with invalid spells
  WRITE_LONG 0x38 count - delete
  PATCH_FOR_EACH off IN 0x2c 0x4c 0x70 BEGIN
    READ_LONG off another
    PATCH_IF another>=offset BEGIN
      WRITE_LONG off another - delete*0x1c
    END
  END
  FOR (i=0;i<47;i+=1) BEGIN                      // global item type loop
    PATCH_IF $counter("%i%")>0 BEGIN             // if there's at least one of this type - no need to waste electric power
      PHP_EACH $fixed("%i%") AS ind => res BEGIN // load the hardcoded array
        FOR (j=0;j<$counter("%i%");j+=1) BEGIN   // check every item in this type group
          SPRINT name $name("%i%""%j%")
          PATCH_IF (~%name%~ STRING_EQUAL_CASE ~%res%~) BEGIN
            SET $sorted("%i%""%j%") = 1
            WRITE_ASCIIE offset $entry("%i%""%j%") (0x1c)
            offset+=0x1c
          END
        END
      END
      FOR (j=0;j<$counter("%i%");j+=1) BEGIN     // now we simply put in what remains, if...
        PATCH_IF $sorted("%i%""%j%")=0 BEGIN     // ...the previous block didn't sort it out
          WRITE_ASCIIE offset $entry("%i%""%j%") (0x1c)
          offset+=0x1c
        END
      END
    END // PATCH_IF
  END // FOR

PATCH_VERBOSE END

END

///////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION temple BEGIN
  READ_LONG 0x70 offset
  READ_LONG 0x74 number
  i=0
  DELETE_BYTES offset number*12
  PHP_EACH temple AS ind => res BEGIN
    PATCH_IF VARIABLE_IS_SET EVAL ~%ind%~ BEGIN
      PATCH_IF EVAL ~%ind%~ > 0 BEGIN
        INSERT_BYTES offset+i*12 12
        WRITE_ASCIIE offset+i*12 ~%res%~
        WRITE_LONG offset+i*12+8 EVAL ~%ind%~
        i+=1
      END
    END
  END
  WRITE_LONG 0x74 i
  PATCH_FOR_EACH off IN 0x2c 0x34 0x4c BEGIN
    PATCH_IF LONG_AT off>=offset BEGIN
      WRITE_LONG off (LONG_AT off - (number - i)*12)
    END
  END
END

///////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION store BEGIN

  PATCH_IF VARIABLE_IS_SET sell BEGIN WRITE_LONG  0x14 sell END
  PATCH_IF VARIABLE_IS_SET buy  BEGIN WRITE_LONG  0x18 buy  END
  PATCH_IF VARIABLE_IS_SET diff BEGIN WRITE_SHORT 0x20 diff END

  PATCH_IF VARIABLE_IS_SET steal BEGIN
    PATCH_IF steal=0 BEGIN WRITE_BYTE 0x10 BYTE_AT 0x10 &`8 END
    PATCH_IF steal=1 BEGIN WRITE_BYTE 0x10 BYTE_AT 0x10  |8 END
  END

  PATCH_IF VARIABLE_IS_SET fence BEGIN
    PATCH_IF fence=0 BEGIN WRITE_BYTE 0x11 BYTE_AT 0x11 &`16 END
    PATCH_IF fence=1 BEGIN WRITE_BYTE 0x11 BYTE_AT 0x11  |16 END
  END

END

///////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION make_scrolls BEGIN

<<<<<<<<ag#dummy
>>>>>>>>

ACTION_DEFINE_ASSOCIATIVE_ARRAY make_scrolls BEGIN
  sppr101 => ag#ir01  // Bless
  sppr109 => ag#ir02  // Sanctuary
  sppr111 => ag#ir03  // Armor of Faith
  sppr203 => ag#ir04  // Chant
  sppr205 => ag#ir05  // Find Traps
  sppr211 => ag#ir06  // Silence
  sppr214 => ag#ir08  // Draw Upon Holy Might
  sppr303 => ag#ir09  // Dispel Magic
  sppr304 => ag#ir0a  // Glyph of Warding
  sppr307 => ag#ir0b  // Remove Curse/Break Enchantment
  sppr308 => ag#ir0c  // Remove Paralysis
  sppr313 => ag#ir0d  // Holy Smite
  sppr314 => ag#ir0e  // Unholy Blight
  sppr509 => ag#ir0f  // Magic Resistance
  sppr514 => ag#ir0g  // Mass Cure
  sppr601 => ag#ir0h  // Aerial Servant
  sppr603 => ag#ir0i  // Blade Barrier
  sppr607 => ag#ir0j  // Heal
  sppr612 => ag#ir0k  // Bolt of Glory
  sppr705 => ag#ir0l  // Fire Storm
  sppr707 => ag#ir0m  // Sunray
  sppr711 => ag#ir0n  // Regeneration
  sppr505 => ag#ir07  // True Sight
END


ACTION_PHP_EACH make_scrolls AS ind => res BEGIN

  ACTION_IF FILE_EXISTS_IN_GAME ~%ind%.spl~ BEGIN

   COPY_EXISTING - ~%ind%.spl~ override
    READ_LONG 0x8 name
    READ_SHORT 0x20 type
    READ_LONG 0x34 level
    READ_LONG 0x50 desc
    READ_LONG 0x64 header
    READ_BYTE header+0xc target
    READ_SHORT header+0xe range

   COPY ag#dummy ~override/%res%.itm~
    INSERT_BYTES 0 0x72+0x38+0x30
    WRITE_ASCII 0 ~ITM V1  ~ (8)

    WRITE_LONG 0x8 7222 // #7222 = ~Scroll~
    WRITE_LONG 0xc name
    WRITE_BYTE 0x18 108 // flags
    WRITE_SHORT 0x1c 0xb // item type = scroll
    WRITE_LONG 0x1e type=0 ? 0x004f2840 : type=0x4000 ? 0x205febc0 : 0x406f3840 // usability flags
    WRITE_BYTE 0x2e 9 // min WIS
    WRITE_LONG 0x34 level<6 ? level*100 : level=6 ? 1000 : 2500 // price
    WRITE_SHORT 0x38 5 // max stack

    WRITE_ASCIIE 0x3a ~%ind%a~ (8) // inventory
    WRITE_ASCII 0x44 ~GSCRL01~ (8) // ground
    WRITE_LONG 0x54 desc
    WRITE_ASCII 0x58 ~CSCRL01~ (8) // description

    WRITE_LONG 0x64 0x72
    WRITE_SHORT 0x68 1
    WRITE_LONG 0x6a 0x72+0x38

    // ability header
    WRITE_BYTE 0x72 3 // attack type = magical
    WRITE_BYTE 0x72+2 3 // location = equipment
    WRITE_ASCIIE 0x72+4 ~%ind%a~ (8)
    WRITE_BYTE 0x72+0xc target
    WRITE_BYTE 0x72+0xe range
    WRITE_SHORT 0x72+0x1e 1
    WRITE_SHORT 0x72+0x22 1 // charges
    WRITE_SHORT 0x72+0x24 1 // charge depletion = vanish
    WRITE_SHORT 0x72+0x2a 1 // projectile animation

    // effect
    WRITE_SHORT 0xaa target=4 ? 148 : 146 // opcode
    WRITE_BYTE 0xaa+2 target=1 ? 2 : 1 // target
    WRITE_BYTE 0xaa+4 10 // param1
    WRITE_BYTE 0xaa+0xc 1 // timing
    WRITE_BYTE 0xaa+0x12 100 // probability
    WRITE_ASCIIE 0xaa+0x14 ~%ind%~ (8) // resource

  END

END

END

///////////////////////////////////////////////////////////////////////////////////////////////////









